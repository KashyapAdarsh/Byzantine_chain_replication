# This testcase is used to test retransmission case :
# Client times out before result shuttle goes back up the chain,
# retransmission is sent to everyone and since none of them have result cached
# everyone forwards the request to head and starts timer, and now head has seen the msg_id so
# it does not start a new shuttle but instead waits, and now when the
# result shuttle comes back all replicas store the result and send result
# to client.

# Req : Need to add sleep(10) in send new shuttle end
#		Reduce the timeout of client

test_case_name = testing_retransmission

# number of failures to tolerate.  number of replicas is 2t+1.
t = 1
# number of clients
num_client = 1
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 8
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1;0;2
# host on which each replica runs.  same in all configurations.
replica_hosts = 0;1;2

# CLIENT WORKLOAD
workload[0] = put('movie','star')
