from logger import *
from classes import *
from constants import *
from olympus import Olympus
from timer import CustomTimer
import time
import sys
import pickle
import nacl.encoding
import nacl.signing
import uuid

class Client(process):
	def setup(olympus, id, init_config, work_load):
		self.client_id = id
		self.tolerance = 0
		self.signing_key = None
		self.work_load = work_load
		self.current_work_load = 0
		self.msg_details = dict()
		self.replica_head = None
		self.active_config = None
		self.replica_tail = None
		self.replica_keys = None
		self.verify_key = None
		self.replica_list = None
		self.replicas_ready = False
		self.olympus = olympus
		self.is_reconfig_finished = False
		self.data_store = dict()
		self.retransmit_result = dict()
		self.config_timer = None
		self.head_data_store = dict()
		self.timeout = float(init_config[CLIENT_TIMEOUT])
		self.INFO = "["+str(self.client_id).replace('>', "").replace('<', '')+"] "
		log.info(self.INFO + "Setup complete")

	def run():

		print ("LOG - ", str(log))

		generate_keys()
		register_with_olympus()
		
		# For various operations, we send next operation only after receiving
		# response for current operation

		# We sleep for small time so that olympus can share client details to
		# everyone by then.

		await(self.replicas_ready == True)

		# Start checking of config is changed at intervals
		self.config_timer = CustomTimer(float(CONFIG_CHECK_INTERVAL), check_config_change)

		for load in work_load:
			time.sleep(1)
			msg_id = uuid.uuid4()
			# This is required here because when reconfig happens, and if there is a scenarios where :
			# client sent the request and byt he time it reached head, head had become immutable.
			handle_any_retransmission()
			operation = make_operation(msg_id, load)
			if (operation == None):
				continue
			send_request(operation, "new")
			execute_operation(operation)

		handle_any_retransmission()

		#after all work load is processed check that dictionary contains expected content at end of test case
		log.info(self.INFO + "sending data store query request to head")
		send(("query_data_store"), to=self.replica_head)
	
		await(len(self.head_data_store) > 0)		

		ver_result  = check_expectedContent()

		if (ver_result):
			log.info(self.INFO + "Verification  of datastore succeeded.")
		else:
			log.error(self.INFO + "Verification of the datastore failed.")

		self.config_timer.stop()


	def check_config_change():
		log.info(self.INFO + "Contacting olympus to check if config is changed.")
		send(("is_config_changed", self.active_config), to=self.olympus)

	#After all work load is processed, this method checks that dictionary contains expected content at end of test case

	def check_expectedContent():
		log.info(self.INFO + "verifying data store query request result from head to local data store")
		return all(item in head_data_store.items() for item in self.data_store.items())


	# Thi method will register a client to olympus
	def register_with_olympus():
		verify_key_hex = generate_keys()
		send(("register_client",self.client_id, verify_key_hex), to=self.olympus)
		# Wait untill we recieve back data from olympus
		log.info(self.INFO + "Waiting till we receive all replica details from olympus")
		await(self.replica_keys != None)

	# This method generates a signing key and verification key
	# verification key that we send to olympus is encoded before sending
	
	def generate_keys():
		self.signing_key = nacl.signing.SigningKey.generate()
		self.verify_key = self.signing_key.verify_key
		verify_key_hex = self.verify_key.encode(encoder=nacl.encoding.HexEncoder)
		return verify_key_hex

	# This method identifies type of operation that client has to request next
	# and make an operation object with all necessary details like 
	# TYPE - Get, put, append or slice
	# and key, values for each operation

	def make_operation(msg_id, opt):
		operation = None
		# Identify put, append or slice workloads
		if ((PUT in opt) or (APPEND in opt) or (SLICE in opt)):
			temp = opt[opt.index('(') + 1:opt.index(')')].split(',')
			key = temp[0].replace("'", "").strip()
			value = temp[1].replace("'", "").strip()
			operation = Operation(opt[0:opt.index('(')].strip(), msg_id, \
											Data(key, value), self.client_id)
		# Identifies get workload
		elif (GET in opt):
			value = opt[opt.index('(') + 1:opt.index(')')].replace("'", "").strip()
			operation = Operation(GET, msg_id, Data(None, value), self.client_id)
		else :
			log.info(self.INFO + "Operation type not recognized.")

		return operation

	# This method sends request for the first time or if timesout
	# then it sends retransmission request as well.

	def send_request(operation, type):
		# Sending a new request

		if (type == "new"):
			send(("operation", operation, None, None), to=self.replica_head)
			log.info(self.INFO + "sending operation request to head with msgID : "\
					+str(operation.msg_id) + " operation : {" + str(operation.type) + \
					"(" + str(operation.data.key) + "," + str(operation.data.value) + ")}")
			self.msg_details[operation.msg_id] = ClientMessage(False, operation)
			
			if(await(self.msg_details[operation.msg_id].is_response_received == True or \
				self.msg_details[operation.msg_id].is_response_received == "Pending")):
				continue
			elif (timeout(self.timeout)):
				log.info(self.INFO + "TIMEOUT")
				send_request(operation, "retransmission")
		else:
			self.msg_details[operation.msg_id].is_retransmited = True
			# Need to broadcast instead here
			broadcast_request(operation)

			# We wait untill all replicas send the result
			# TODO :  If we receive result from all then we need to verify
			if(await((len(self.retransmit_result) > 0) or (self.msg_details[operation.msg_id].is_response_received == True))):
				
				# We can enter this loop with second condition when we receive result from olympus during
				# reconfiguration.
				if (self.msg_details[operation.msg_id].is_response_received == True):
					continue

				log.info(self.INFO + "Received a succesfull retransmission result from " + \
						str(list(self.retransmit_result.keys())[0]) + " for msg : " + str(operation.msg_id))
				self.msg_details[operation.msg_id].is_response_received = True
				# Better to print result after verification
				if (verify_result(self.retransmit_result[list(self.retransmit_result.keys())[0]]) is False):
					log.error(self.INFO + "Result verification failed for msg "+str(operation.msg_id)+", need to reconfigure")
					return
				else:
					log.info(self.INFO + "Retransmission result : " + str(self.retransmit_result[list(self.retransmit_result.keys())[0]].result_proof.result))
			elif (timeout(self.timeout)):
				log.error(self.INFO + "Retransmission timed out, we did not receive any successful result. sending reconfig request to olympus")

	# This method is used by client to verify the results received.

	def verify_result(response):
		log.info(self.INFO + "Verifying result for msg " + str(response.msg_id))
		index = 0
		prev_res = None

		# Verify result should have statement from atleast t+1 replicas.
		if (len(response.result_proof.statements) < self.tolerance + 1):
			return False

		total_found = 0

		for statement in response.result_proof.statements:

			verify_key = nacl.signing.VerifyKey(self.replica_keys[self.replica_list[index]], \
												encoder=nacl.encoding.HexEncoder)
			index += 1
			res = pickle.loads(verify_key.verify(statement))


			if (prev_res is not None and (prev_res.operation.type != res.operation.type or \
				prev_res.operation.data.key != res.operation.data.key or \
				prev_res.operation.data.value != res.operation.data.value or \
				prev_res.operation.msg_id != res.operation.msg_id or \
				prev_res.operation.client_id != res.operation.client_id or \
				prev_res.result != res.result)):
				continue

			total_found += 1

			if (total_found == (self.tolerance + 1)):
				log.info(self.INFO + "Valid t+1 found.")
				log.info(self.INFO + "Verification of result for msg "+str(response.msg_id)+" succesful.")
				return True

			prev_res = res

		if (total_found < (self.tolerance + 1)):
				log.info(self.INFO + "Valid t+1 is not found.")
				return False

		log.info(self.INFO + "Verification of result for msg "+str(response.msg_id)+" succesful.")
		return True

	#This method executes the operations by itself as well, the ones that it sends to replicas.
	#Later, all results on replicas are queried and verifies with locally stored results

	def execute_operation(operation):
		if (operation.type == PUT):
			self.data_store[operation.data.key] = [operation.data.value]
			return OK

		elif (operation.type == APPEND):
			if (operation.data.key in self.data_store):
				self.data_store[operation.data.key].append(operation.data.value)
				return OK
			return FAIL

		elif (operation.type == SLICE):
			start = int(operation.data.value.split(":")[0])
			end = int(operation.data.value.split(":")[1])

			if (operation.data.key not in self.data_store or start < 0 \
									or end > len(self.data_store)):
				return FAIL
			else:
				self.data_store[operation.data.key] = \
						self.data_store[operation.data.key][start : end]
				return OK

		elif (operation.type == GET):
			if (operation.data.value not in self.data_store):
				return NOT_PRESENT
			else:
				return self.data_store[operation.data.value]

		else:
			return ERROR

	# If there are any pending requests i.e. not received results from olympus either (could be possible
	# when replcias in quorum has not seen this.)
	def handle_any_retransmission():
		# Handle retransmitting if any
		for msg in list(self.msg_details.keys()):
			if (self.msg_details[msg].is_response_received == "Pending"):
				log.info(self.INFO + str(self.msg_details[msg].operation.msg_id) + " Re-transmitting")
				send_request(self.msg_details[msg].operation, "retransmission")

	def broadcast_request(operation):
		# This will broadcast the retransmission to all replicas
		print("Broadcasting to all replicas : " , list(self.replica_keys.keys()))
		for replica, val in self.replica_keys.items():
			log.info(self.INFO + "sending retransmission request to replica " +str(replica)+" for msgID : "\
					+str(operation.msg_id))
			send(("retransmit_operation",operation, None, None), to=replica)
			self.retransmit_result = dict()

	######## Receivers in client #########

	def receive(msg=("client_config", config)):
		log.info(self.INFO + "Received replica details from olympus")
		self.replica_head = config.head_id
		self.replica_tail = config.tail_id
		self.replica_keys = config.replicas
		self.replica_list = config.replica_list
		self.tolerance = config.t

	def receive(msg=("result_from_olympus", response), from_=o):

		# If we receive response for message that we have already got response, then neglect
		if (self.msg_details[response.msg_id].is_response_received == True):
			await(self.is_reconfig_finished == True)
			for msg in list(self.msg_details.keys()):
				if (self.msg_details[msg].is_response_received == False):
					# Making it pending
					log.info(self.INFO + "Making " + str(self.msg_details[msg].operation.msg_id) + "as pending.")
					self.msg_details[msg].is_response_received = "Pending"
			return

		log.info(self.INFO + "Received result for msg " + str(response.msg_id))

		log.info(self.INFO + "Result verified for msg "+ str(response.msg_id) + \
				" and the result is : " + str(response.result))

		# Before making response received true, we need to get all other details of new config.
		# Once the below boolean is made true, client will continue sending new requests.
		# This await condition will be satisfied after all details of replicas is received and
		# new head is ready to handle new requests.
		await(self.is_reconfig_finished == True)
		self.msg_details[response.msg_id].is_response_received = True

	# Receiver for result in client.
	# This has to verify the result and stuff
	# TODO - request reconfig.

	def receive(msg=("result", response), from_=r):

		# This receives results when it is normal
		if (self.msg_details[response.msg_id].is_retransmited == False):
			log.info(self.INFO + "Received result for msg " + str(response.msg_id))

			if(verify_result(response) == False):
				log.error(self.INFO + "Result verification failed for msg "+ \
						str(response.msg_id)+", asking olympus to reconfigure")

				log.info(self.INFO + "Making " + str(response.msg_id) + "as pending.")
				self.msg_details[response.msg_id].is_response_received = "Pending"
				return

			log.info(self.INFO + "Result verified for msg "+ str(response.msg_id) + \
					" and the result is : " + str(response.result))
			self.msg_details[response.msg_id].is_response_received = True
		# This receives the result through retransmit
		else :
			# We will add result to dict only if it is success, if we receive success result 
			# from alteast one replica, then we are good
			if (response.result != ERROR):
				self.retransmit_result[r] = response

	def receive(msg=("head_data_store", head_data_store), from_=r):
		log.info(self.INFO + "head_data_store receieved from head")
		self.head_data_store = head_data_store

	def receive(msg=("replicas_ready", active_config), from_=o):
		self.active_config = active_config
		log.info(self.INFO + " Current active config : " + str(self.active_config))
		self.replicas_ready = True

	def receive(msg=("config_change_result", result, active_config), from_=o):
		if (result == True):
			log.info(self.INFO + "Configration has been changed, need to resend pending requests to new head.")
			# Save the new active config
			self.active_config = active_config
			# Get new client config object, this contains new replica details
			self.replica_list = None
			log.info(self.INFO + "Requesting new replica details.")
			send(("new_client_config", self.client_id), to=o)
			await(self.replica_list != None)
			self.is_reconfig_finished = True
		
		else:
			log.info(self.INFO + "Configuration is not changed.")