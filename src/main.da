import os
from logger import *
import time
import sys
import random
from olympus import Olympus
from constants import *
from client import Client

# Reads all the configurations from the file
def read_config(file, log):
	config = {}
	lines = None
	try:
		lines = open(file, "r").readlines()
	except:
		log.error(file + " : No such file or directory")
		exit()

	for line in lines:
		if (not line.startswith('#') and not line.startswith('\n')):
			config[line.split('=')[0].strip()] = line.split('=')[1].strip()

	log.info("INIT_CONFIG: " + str(config))

	return config		

# Might need this to verify if all configurations are read properly
def verify_config():
	pass

def generate_random_workload(p_request):
	log.info("[MAIN]"+" Generating Random Workload")

	p_request = p_request.lstrip('pseudorandom(')
	p_request = p_request.rstrip(')')
	seed, n = map(int,p_request.split(','))
	operations = []

	random.seed(seed)
	for i in range(n):
		operations.append((random.randint(0,1000)%4,random.randint(0,100)%5))

	work_load = populate_workload_operations(operations)
	return work_load

def populate_workload_operations(operations):
	log.info("[MAIN] Populating Random Workload Operations")
	work_load = []
	for op,offset in operations:
		if op == 0:
			work_load.append(PUT_OPS.split(';')[offset])
		elif op == 1:
			work_load.append(APPEND_OPS.split(';')[offset])
		elif op == 2:
			work_load.append(GET_OPS.split(';')[offset])
		else:
			work_load.append(SLICE_OPS.split(';')[offset])
	return work_load	

def main():

	# Helper methods required to initialize the system
	def initialize_olympus(config):
		log.info(INFO + "Initializing olympus")
		olympus = new(Olympus, num=1)
		setup(olympus, [config])
		start(olympus)
		return olympus

	def initialize_client(config, olympus, num):
		log.info(INFO + "Initializing clients")
		hosts = config[CLIENT_HOSTS].split(';')
		clients = []

		# Running clients on different hosts
		for i in range(num):
			node = 'Node' + str(hosts[i])
			clients.append(new(Client, agrs=(), at=node))

		clients = [next(iter(client)) for client in clients]
		# clients = new(Client, num=num)

		for client_num, client in enumerate(clients):
			# Get workload for every client
			requests = config[WORKLOAD + "[" + str(client_num) + "]"]

			if requests.startswith('pseudorandom'):
				work_load = generate_random_workload(requests)
			else:
				work_load = requests.split(';')

			setup(client, [olympus, client, config, work_load])
			start(client)
			
	# Program starts execution from here

	file = "../config/default.config"
	olympus = None
	INFO = "[MAIN] "

	if(len(sys.argv) == 1):
		set_file_name("default_config")
		log.info(INFO  + "Using default config file : " + "config/default.config")
	else:
		set_file_name(sys.argv[1])
		log.info(INFO + "Using custom config : " + sys.argv[1])
		file = sys.argv[1]

	config = read_config(file, log)
	# log.info(INFO + "Config received: " + str(config))

	# Initialize Olympus
	olympus = initialize_olympus(config)

	# Initialize a client
	initialize_client(config, olympus, int(config[CLIENT_COUNT]))

	is_alive = False
	await(is_alive == True)